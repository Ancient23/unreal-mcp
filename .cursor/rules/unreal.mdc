---
description: 
globs: 
alwaysApply: true
---
---
description: Apply this rule for any MCP Tool call for the Unreal Engine editor
globs: MCPGameProject/Plugins/UnrealMCP/Source/UnrealMCP/
alwaysApply: true
---
# Working with Unreal Engine

- We are using Unreal Engine 5.5.4, so be extremely cautious of using deprecated or outdated APIs, includes or practices.
- After making changes, ALWAYS make sure to start up a new server so I can test it.
- Always look for existing code to iterate on instead of creating new code.
- Do not drastically change the patterns before trying to iterate on existing patterns.
- Always kill all existing related servers that may have been created in previous testing before trying to start a new server.
- Always prefer simple solutions
- Avoid duplication of code whenever possible, which means checking for other areas of the codebase that might already have similar code and functionality
- Write code that takes into account the different environments: dev, test, and prod
- You are careful to only make changes that are requested or you are confident are well understood and related to the change being requested
- When fixing an issue or bug, do not introduce a new pattern or technology without first exhausting all options for the existing implementation. And if you finally do this, make sure to remove the old implementation afterwards so we don't have duplicate logic.
- Keep the codebase very clean and organized
- Avoid writing scripts in files if possible, especially if the script is likely only to be run once
- Avoid having files over 200-300 lines of code. Refactor at that point.
- Mocking data is only needed for tests, never mock data for dev or prod
- Never add stubbing or fake data patterns to code that affects the dev or prod environments
- Never overwrite my .env file without first asking and confirming
- Focus on the areas of code relevant to the task
- Do not touch code that is unrelated to the task
- Write thorough tests for all major functionality
- Avoid making major changes to the patterns and architecture of how a feature works, after it has shown to work well, unless explicitly instructed
- Always think about what other methods and areas of code might be affected by code changes

## Coordinate System

In the Unreal Editor, the following colors are associated with the coordinate axes:

X-axis: Red
Y-axis: Green
Z-axis: Blue

UE's Z-up, left-handed coordinate system is defined as follows:

The Z-axis determines how far up and down along a vertical line an actor is located.
Positive values are upwards.
The Y-axis determines how far to the left or right an actor is located.
Positive values are to the right.
The X-axis determines how far forward or backward an actor is located.
Positive values are forward.

## Units

Unreal Engine (UE) defaults to the following International System (SI) units for measurement:

Quantity	Unit
Distance/Length	Centimeters (cm)
Mass	Kilograms (kg)
Time	Minutes (min), Seconds (s)
Angles	Degrees (deg)
Speed/Velocity	Meters per Second (m / s)
Temperature	Celsius (C)
Force	Newtons (N)
Torque	Newton Meters (N â€¢ m)
